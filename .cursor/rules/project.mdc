---
description: 
globs: 
alwaysApply: false
---
(a)開発の進め方（★重要）		
	1) ユーザの要件に対して、要件分析を行う。	
	 - 要件分析の過程で、不足している条件がある場合、ユーザにヒアリングを行う。	
	 - 次工程の外部設計が実施可能となるだけの情報が分析、整理できているかを確認する。	
	 - 要求分析の結果をドキュメントとして出力する。	
		
	2) 要件分析の結果に従い、外部設計を行う。	
	 - 開発すべきシステムが持つ機能を分析し、整理する。	
	 - 開発すべきシステムの境界面と、外部との入出力を明確にする。	
	 - 開発すべきシステムの構成モジュールを明確にする。	
	 - 構成モジュールは、システム、サブシステム、プロセス等の観点や、file, class, functionなどの観点で、階層的、内包的に検討すべきである。	
	 - システムが扱うべきデータを明確にする。	
	 - データの内容や属性、及び、どのようなタイミングでデータのCRUDが発生するかを明確にする。	
     - 外部設計の結果をドキュメントに出力する。		
		
	3) 要件分析と外部設計の結果に基づき、実装計画を立てる。	
	 - 実際に必要な内容を整理し、優先順を検討し、計画を立てる。	
	 - 適切に実装されているかを確認するテスト方法、テスト内容も計画に含める。	
	 - テストは可能な限り自動実行できることが望ましい。	
		
	4) 要件分析、外部設計、実装計画に基づき、ユーザの要件を実現する、システムを作成する。	
	5) 設計、デバッグ中の方針	
	 - デバッグするときは、考えられる原因を複数想定し、ロジカルに原因を分析し、テストコードで確認した上で、対策を実施する。	
     - 必要なテスト実行コードを作成し、テスト結果を集計できるようにする。		
	 - システム作成中に、不具合等が発生したときは、不具合の現象、調査結果、対策内容等を整理したドキュメントを作成する。	
	 - システム作成中に、試行錯誤した内容は、解決しようとした課題、試行内容、試行結果、最終的な結論などを整理したドキュメントを作成する。	
	 - 作成中に、ドキュメントは適宜、最新状況に更新する。	
		
(b)ユーザの要件		
    1)開発すべきシステムの概要
	 - ユーザから提供された条件に基づき、情報の検索方法、検索先、検索条件を決定し、情報を検索し、まとめるエージェントを開発する。	
	 - langchain v0.3,LangGraph,TypeScriptで、ReAct技術を使用したエージェントを活用する。　	
		
	2)基本機能	
	 - OpenAI, Gemini、Claude、DeepSeekの複数のモデルを、ユーザが切り替えて使用できる。
	 - 使用できるモデルは下記の通り。
	 -- Anthropic:	claude-3-7-sonnet-20250219, claude-3-5-sonnet-20241022, claude-3-5-haiku-20241022
	 -- Google:	gemini-2.0-flash, gemini-1.5-flash, gemini-1.5-pro
	 -- OpenAI:	gpt-4.5-preview-2025-02-27, gpt-4o-2024-08-06, gpt-4o-mini-2024-07-18
	
	 - エージェントは一つにするか、複数に分けるかは、外部設計で決定する。
	 - ユーザから提供される条件の記載方法は下記のいずれとも対応する。
  	 -- ユーザから提供される条件の入手形態: URL, ローカルファイル, テキスト情報
     -- 最初に検索を実行したい、ユーザから提供された条件が記載されたサイトは、下記である。
     --- https://zenn.dev/discus0434/articles/6e5add61970786
     --- ただし、他の条件での検索も実行することを想定した、汎用的な仕組みが必要である。

     - ユーザからて提供される条件を理解し、情報の検索方法、検索先、検索手順、そのほか、必要なことを検索条件として整理する。
	 - 上記で整理した検索条件に基づき、検索を実行する。
	 - 検索実行結果をまとめ、人間が読みやすい形で整理する。
	 - 定期的に検索を実行して、情報を蓄積するための仕組みを用意する。

	3)保守機能	
	 - システムのログをファイルに記述する。ログレベルはINFO,WARN,ERRのレベル分けをする。	
	 - システム内でエラーが発生したときに、発生したエラーやスタックとレースが必ずログに残るようにする。	
	 - AIとのエージェントレベルのやり取りを、チャットログファイルに記録する。	
	 - ログ系のファイルは同一日付に発生した情報は、同一ファイルに記録する。
		
	4)その他	
	 - langChain v0.2とv0.3では、大きな非互換性があります。参考にするソースコードがv0.3であることを常に注意すること。	
	 - Langchainのモジュールを新たにインポートするときは、Webサイトの公式情報や関連情報を検索し、最新状況を確認すること。	
	 - フォルダ構成は、"doc"が設計ドキュメント等、"src"がプログラムコード等、"test"がテストコード等の格納先です。

